// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: spu.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpuDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title      int32  `protobuf:"varint,2,opt,name=title,proto3" json:"title,omitempty"`
	SubTitle   string `protobuf:"bytes,3,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`
	CategoryId int32  `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	SpgId      int32  `protobuf:"varint,5,opt,name=spg_id,json=spgId,proto3" json:"spg_id,omitempty"`
	Saleable   bool   `protobuf:"varint,6,opt,name=saleable,proto3" json:"saleable,omitempty"`
	Valid      bool   `protobuf:"varint,7,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *SpuDetail) Reset() {
	*x = SpuDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spu_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuDetail) ProtoMessage() {}

func (x *SpuDetail) ProtoReflect() protoreflect.Message {
	mi := &file_spu_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuDetail.ProtoReflect.Descriptor instead.
func (*SpuDetail) Descriptor() ([]byte, []int) {
	return file_spu_proto_rawDescGZIP(), []int{0}
}

func (x *SpuDetail) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuDetail) GetTitle() int32 {
	if x != nil {
		return x.Title
	}
	return 0
}

func (x *SpuDetail) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *SpuDetail) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuDetail) GetSpgId() int32 {
	if x != nil {
		return x.SpgId
	}
	return 0
}

func (x *SpuDetail) GetSaleable() bool {
	if x != nil {
		return x.Saleable
	}
	return false
}

func (x *SpuDetail) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type Spus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spus []*SpuDetail `protobuf:"bytes,1,rep,name=spus,proto3" json:"spus,omitempty"`
}

func (x *Spus) Reset() {
	*x = Spus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spu_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spus) ProtoMessage() {}

func (x *Spus) ProtoReflect() protoreflect.Message {
	mi := &file_spu_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spus.ProtoReflect.Descriptor instead.
func (*Spus) Descriptor() ([]byte, []int) {
	return file_spu_proto_rawDescGZIP(), []int{1}
}

func (x *Spus) GetSpus() []*SpuDetail {
	if x != nil {
		return x.Spus
	}
	return nil
}

type CreateSpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	SubTitle   string `protobuf:"bytes,2,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`
	CategoryId int32  `protobuf:"varint,3,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	SpgId      int32  `protobuf:"varint,4,opt,name=spg_id,json=spgId,proto3" json:"spg_id,omitempty"`
	Saleable   bool   `protobuf:"varint,5,opt,name=saleable,proto3" json:"saleable,omitempty"`
	Valid      bool   `protobuf:"varint,6,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *CreateSpu) Reset() {
	*x = CreateSpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spu_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSpu) ProtoMessage() {}

func (x *CreateSpu) ProtoReflect() protoreflect.Message {
	mi := &file_spu_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSpu.ProtoReflect.Descriptor instead.
func (*CreateSpu) Descriptor() ([]byte, []int) {
	return file_spu_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSpu) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateSpu) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *CreateSpu) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CreateSpu) GetSpgId() int32 {
	if x != nil {
		return x.SpgId
	}
	return 0
}

func (x *CreateSpu) GetSaleable() bool {
	if x != nil {
		return x.Saleable
	}
	return false
}

func (x *CreateSpu) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

var File_spu_proto protoreflect.FileDescriptor

var file_spu_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x70, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x75,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x67, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x04, 0x53, 0x70, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x73,
	0x70, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x70, 0x75, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x73, 0x70, 0x75, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x70, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x70, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x32, 0x63, 0x0a, 0x06, 0x53, 0x70, 0x75, 0x53, 0x72, 0x76,
	0x12, 0x29, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x05, 0x2e, 0x53, 0x70, 0x75, 0x73, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70,
	0x75, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spu_proto_rawDescOnce sync.Once
	file_spu_proto_rawDescData = file_spu_proto_rawDesc
)

func file_spu_proto_rawDescGZIP() []byte {
	file_spu_proto_rawDescOnce.Do(func() {
		file_spu_proto_rawDescData = protoimpl.X.CompressGZIP(file_spu_proto_rawDescData)
	})
	return file_spu_proto_rawDescData
}

var file_spu_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_spu_proto_goTypes = []interface{}{
	(*SpuDetail)(nil),     // 0: SpuDetail
	(*Spus)(nil),          // 1: Spus
	(*CreateSpu)(nil),     // 2: CreateSpu
	(*emptypb.Empty)(nil), // 3: google.protobuf.Empty
}
var file_spu_proto_depIdxs = []int32{
	0, // 0: Spus.spus:type_name -> SpuDetail
	3, // 1: SpuSrv.GetAll:input_type -> google.protobuf.Empty
	2, // 2: SpuSrv.Create:input_type -> CreateSpu
	1, // 3: SpuSrv.GetAll:output_type -> Spus
	3, // 4: SpuSrv.Create:output_type -> google.protobuf.Empty
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_spu_proto_init() }
func file_spu_proto_init() {
	if File_spu_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spu_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spu_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spu_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spu_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spu_proto_goTypes,
		DependencyIndexes: file_spu_proto_depIdxs,
		MessageInfos:      file_spu_proto_msgTypes,
	}.Build()
	File_spu_proto = out.File
	file_spu_proto_rawDesc = nil
	file_spu_proto_goTypes = nil
	file_spu_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SpuSrvClient is the client API for SpuSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpuSrvClient interface {
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Spus, error)
	Create(ctx context.Context, in *CreateSpu, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type spuSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewSpuSrvClient(cc grpc.ClientConnInterface) SpuSrvClient {
	return &spuSrvClient{cc}
}

func (c *spuSrvClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Spus, error) {
	out := new(Spus)
	err := c.cc.Invoke(ctx, "/SpuSrv/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spuSrvClient) Create(ctx context.Context, in *CreateSpu, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/SpuSrv/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpuSrvServer is the server API for SpuSrv service.
type SpuSrvServer interface {
	GetAll(context.Context, *emptypb.Empty) (*Spus, error)
	Create(context.Context, *CreateSpu) (*emptypb.Empty, error)
}

// UnimplementedSpuSrvServer can be embedded to have forward compatible implementations.
type UnimplementedSpuSrvServer struct {
}

func (*UnimplementedSpuSrvServer) GetAll(context.Context, *emptypb.Empty) (*Spus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedSpuSrvServer) Create(context.Context, *CreateSpu) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

func RegisterSpuSrvServer(s *grpc.Server, srv SpuSrvServer) {
	s.RegisterService(&_SpuSrv_serviceDesc, srv)
}

func _SpuSrv_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpuSrvServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpuSrv/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpuSrvServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpuSrv_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpuSrvServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpuSrv/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpuSrvServer).Create(ctx, req.(*CreateSpu))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpuSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SpuSrv",
	HandlerType: (*SpuSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _SpuSrv_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SpuSrv_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spu.proto",
}
